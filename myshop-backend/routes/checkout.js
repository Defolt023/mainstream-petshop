// routes/checkout.js
const express = require("express");
const router = express.Router();
const authMiddleware = require("../middleware/auth");
const User = require("../models/User");
const Product = require("../models/Product");
const Order = require("../models/Order"); // ‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Order
const TelegramBot = require("node-telegram-bot-api");

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

let bot;
if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
  bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });
}

router.post("/", authMiddleware, async (req, res) => {
  const { name, phone, paymentMethod } = req.body;

  if (!name || !phone || !paymentMethod) {
    return res.status(400).json({ message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è" });
  }

  try {
    const user = req.user;

    if (!user.cart || user.cart.length === 0) {
      return res.status(400).json({ message: "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞" });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    const products = await Product.find({ _id: { $in: user.cart } });

    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
    for (const product of products) {
      if (product.stock > 0) {
        product.stock -= 1;
        await product.save();
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
    const orderItems = products.map(p => ({
      product: p._id,
      quantity: 1, // –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
      price: p.price
    }));

    // –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
    const total = orderItems.reduce((sum, item) => sum + item.price, 0);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    const orderNumber = `#${Date.now().toString().slice(-6)}`;

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ë–î
    const newOrder = new Order({
      user: user._id,
      products: orderItems,
      total,
      orderNumber,
      paymentMethod
    });

    await newOrder.save();

    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.cart = [];
    await user.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const orderText = `
üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!

üë§ –ò–º—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${paymentMethod === "cash_or_card_on_delivery" ? "–ù–∞–ª–∏—á–Ω—ã–º–∏ / –ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏" : "–ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω"}
üì¶ –¢–æ–≤–∞—Ä—ã:
${products.map(p => `- ${p.name} (${p.price} ‚ÇΩ)`).join("\n")}
üí∞ –ò—Ç–æ–≥–æ: ${total} ‚ÇΩ
üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderNumber}
`;

    if (bot) {
      await bot.sendMessage(TELEGRAM_CHAT_ID, orderText);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    res.json({
      ok: true,
      orderNumber,
      message: "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω",
    });

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", err.message);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;